{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kiwonkim/Downloads/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kiwonkim/Downloads/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kiwonkim/Downloads/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kiwonkim/Downloads/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/kiwonkim/Downloads/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kiwonkim/Downloads/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/kiwonkim/Downloads/react-portfolio/src/utils/Crop.js\";\nimport ReactDOM from 'react-dom';\nimport React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nvar Crop = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Crop, _PureComponent);\n\n  var _super = _createSuper(Crop);\n\n  function Crop() {\n    var _this;\n\n    _classCallCheck(this, Crop);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n\n    _this.onSelectFile = function (e) {\n      if (e.target.files && e.target.files.length > 0) {\n        var reader = new FileReader();\n        reader.addEventListener('load', function () {\n          return _this.setState({\n            src: reader.result\n          });\n        });\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    _this.onImageLoaded = function (image) {\n      _this.imageRef = image;\n    };\n\n    _this.onCropComplete = function (crop) {\n      _this.makeClientCrop(crop);\n    };\n\n    _this.onCropChange = function (crop, percentCrop) {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      _this.setState({\n        crop\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Crop, [{\n    key: \"makeClientCrop\",\n    value: function () {\n      var _makeClientCrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop) {\n        var croppedImageUrl;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.imageRef && crop.width && crop.height)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n\n              case 3:\n                croppedImageUrl = _context.sent;\n                this.setState({\n                  croppedImageUrl\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function makeClientCrop(_x) {\n        return _makeClientCrop.apply(this, arguments);\n      }\n\n      return makeClientCrop;\n    }()\n  }, {\n    key: \"getCroppedImg\",\n    value: function getCroppedImg(image, crop, fileName) {\n      var _this2 = this;\n\n      var canvas = document.createElement('canvas');\n      var scaleX = image.naturalWidth / image.width;\n      var scaleY = image.naturalHeight / image.height;\n      canvas.width = crop.width;\n      canvas.height = crop.height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n      return new Promise(function (resolve, reject) {\n        canvas.toBlob(function (blob) {\n          if (!blob) {\n            //reject(new Error('Canvas is empty'));\n            console.error('Canvas is empty');\n            return;\n          }\n\n          blob.name = fileName;\n          window.URL.revokeObjectURL(_this2.fileUrl);\n          _this2.fileUrl = window.URL.createObjectURL(blob);\n          resolve(_this2.fileUrl);\n        }, 'image/jpeg');\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          src = _this$state.src;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: this.onSelectFile,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      })), src && /*#__PURE__*/React.createElement(ReactCrop, {\n        src: src,\n        crop: crop,\n        ruleOfThirds: true,\n        onImageLoaded: this.onImageLoaded,\n        onComplete: this.onCropComplete,\n        onChange: this.onCropChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }), croppedImageUrl && /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"Crop\",\n        style: {\n          maxWidth: '100%'\n        },\n        src: croppedImageUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }\n      }));\n    }\n  }]);\n\n  return Crop;\n}(PureComponent);\n\nexport default Crop;","map":{"version":3,"sources":["/Users/kiwonkim/Downloads/react-portfolio/src/utils/Crop.js"],"names":["ReactDOM","React","PureComponent","ReactCrop","Crop","state","src","crop","unit","width","aspect","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","height","getCroppedImg","croppedImageUrl","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","maxWidth"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass Crop extends PureComponent {\n    state = {\n        src: null,\n        crop: {\n            unit: '%',\n            width: 30,\n            aspect: 16 / 9,\n        },\n    };\n\n    onSelectFile = (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n            const reader = new FileReader();\n            reader.addEventListener('load', () =>\n                this.setState({ src: reader.result })\n            );\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    };\n\n    // If you setState the crop in here you should return false.\n    onImageLoaded = (image) => {\n        this.imageRef = image;\n    };\n\n    onCropComplete = (crop) => {\n        this.makeClientCrop(crop);\n    };\n\n    onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        // this.setState({ crop: percentCrop });\n        this.setState({ crop });\n    };\n\n    async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n            const croppedImageUrl = await this.getCroppedImg(\n                this.imageRef,\n                crop,\n                'newFile.jpeg'\n            );\n            this.setState({ croppedImageUrl });\n        }\n    }\n\n    getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n\n        ctx.drawImage(\n            image,\n            crop.x * scaleX,\n            crop.y * scaleY,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        return new Promise((resolve, reject) => {\n            canvas.toBlob((blob) => {\n                if (!blob) {\n                    //reject(new Error('Canvas is empty'));\n                    console.error('Canvas is empty');\n                    return;\n                }\n                blob.name = fileName;\n                window.URL.revokeObjectURL(this.fileUrl);\n                this.fileUrl = window.URL.createObjectURL(blob);\n                resolve(this.fileUrl);\n            }, 'image/jpeg');\n        });\n    }\n\n    render() {\n        const { crop, croppedImageUrl, src } = this.state;\n\n        return (\n            <div className='App'>\n                <div>\n                    <input\n                        type='file'\n                        accept='image/*'\n                        onChange={this.onSelectFile}\n                    />\n                </div>\n                {src && (\n                    <ReactCrop\n                        src={src}\n                        crop={crop}\n                        ruleOfThirds\n                        onImageLoaded={this.onImageLoaded}\n                        onComplete={this.onCropComplete}\n                        onChange={this.onCropChange}\n                    />\n                )}\n                {croppedImageUrl && (\n                    <img\n                        alt='Crop'\n                        style={{ maxWidth: '100%' }}\n                        src={croppedImageUrl}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Crop;\n"]},"metadata":{},"sourceType":"module"}