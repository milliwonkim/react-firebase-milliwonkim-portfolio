{"ast":null,"code":"import _slicedToArray from \"/Users/kiwonkim/Downloads/react-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kiwonkim/Downloads/react-portfolio/src/utils/CropHooks.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ReactCrop } from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop';\n\nfunction CropHooks() {\n  var _this = this;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      src = _useState2[0],\n      setSrc = _useState2[1];\n\n  var _useState3 = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      crop = _useState4[0],\n      setCrop = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      imageRef = _useState6[0],\n      setImageRef = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      croppedImageUrl = _useState8[0],\n      setCroppedImageUrl = _useState8[1];\n\n  useEffect(function () {\n    console.log(src, 'src');\n  }, []);\n\n  var onSelectFile = function onSelectFile(e) {\n    if (e.target.files && e.target.files.length > 0) {\n      var reader = new FileReader();\n      reader.addEventListener('load', function () {\n        return setSrc(reader.result);\n      });\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }; // If you setState the crop in here you should return false.\n\n\n  var onImageLoaded = function onImageLoaded(image) {\n    setImageRef(image);\n  };\n\n  var onCropComplete = function onCropComplete(crop) {\n    makeClientCrop(crop);\n  };\n\n  var onCropChange = function onCropChange(crop, percentCrop) {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    setCrop(crop);\n  };\n\n  var makeClientCrop = function makeClientCrop(crop) {\n    if (imageRef && crop.width && crop.height) {\n      var _croppedImageUrl = getCroppedImg(imageRef, crop, 'newFile.jpeg');\n\n      setCroppedImageUrl(_croppedImageUrl);\n    }\n  };\n\n  var getCroppedImg = function getCroppedImg(image, crop, fileName) {\n    var canvas = document.createElement('canvas');\n    var scaleX = image.naturalWidth / image.width;\n    var scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise(function (resolve, reject) {\n      canvas.toBlob(function (blob) {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(_this.fileUrl);\n        _this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(_this.fileUrl);\n      }, 'image/jpeg');\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    onChange: onSelectFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  })), src && /*#__PURE__*/React.createElement(ReactCrop, {\n    src: src,\n    crop: crop,\n    ruleOfThirds: true,\n    onImageLoaded: onImageLoaded,\n    onComplete: onCropComplete,\n    onChange: onCropChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), croppedImageUrl && /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Crop\",\n    style: {\n      maxWidth: '100%'\n    },\n    src: croppedImageUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }));\n}\n\nexport default CropHooks;","map":{"version":3,"sources":["/Users/kiwonkim/Downloads/react-portfolio/src/utils/CropHooks.js"],"names":["React","useState","useEffect","ReactCrop","CropHooks","src","setSrc","unit","width","aspect","crop","setCrop","imageRef","setImageRef","croppedImageUrl","setCroppedImageUrl","console","log","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onImageLoaded","image","onCropComplete","makeClientCrop","onCropChange","percentCrop","height","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ReactCrop } from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop';\n\nfunction CropHooks() {\n    const [src, setSrc] = useState('');\n    const [crop, setCrop] = useState({\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9,\n    });\n    const [imageRef, setImageRef] = useState(null);\n    const [croppedImageUrl, setCroppedImageUrl] = useState(null);\n\n    useEffect(() => {\n        console.log(src, 'src');\n    }, []);\n\n    const onSelectFile = (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n            const reader = new FileReader();\n            reader.addEventListener('load', () => setSrc(reader.result));\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    };\n\n    // If you setState the crop in here you should return false.\n    const onImageLoaded = (image) => {\n        setImageRef(image);\n    };\n\n    const onCropComplete = (crop) => {\n        makeClientCrop(crop);\n    };\n\n    const onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        // this.setState({ crop: percentCrop });\n        setCrop(crop);\n    };\n\n    const makeClientCrop = (crop) => {\n        if (imageRef && crop.width && crop.height) {\n            const croppedImageUrl = getCroppedImg(\n                imageRef,\n                crop,\n                'newFile.jpeg'\n            );\n\n            setCroppedImageUrl(croppedImageUrl);\n        }\n    };\n\n    const getCroppedImg = (image, crop, fileName) => {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n\n        ctx.drawImage(\n            image,\n            crop.x * scaleX,\n            crop.y * scaleY,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        return new Promise((resolve, reject) => {\n            canvas.toBlob((blob) => {\n                if (!blob) {\n                    //reject(new Error('Canvas is empty'));\n                    console.error('Canvas is empty');\n                    return;\n                }\n                blob.name = fileName;\n                window.URL.revokeObjectURL(this.fileUrl);\n                this.fileUrl = window.URL.createObjectURL(blob);\n                resolve(this.fileUrl);\n            }, 'image/jpeg');\n        });\n    };\n\n    return (\n        <div className='App'>\n            <div>\n                <input type='file' accept='image/*' onChange={onSelectFile} />\n            </div>\n            {src && (\n                <ReactCrop\n                    src={src}\n                    crop={crop}\n                    ruleOfThirds\n                    onImageLoaded={onImageLoaded}\n                    onComplete={onCropComplete}\n                    onChange={onCropChange}\n                />\n            )}\n            {croppedImageUrl && (\n                <img\n                    alt='Crop'\n                    style={{ maxWidth: '100%' }}\n                    src={croppedImageUrl}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default CropHooks;\n"]},"metadata":{},"sourceType":"module"}