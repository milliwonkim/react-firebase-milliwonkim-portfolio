{"ast":null,"code":"import React__default, { createElement, Fragment } from 'react';\nimport { highlight, languages } from 'prismjs';\nimport 'prismjs/components/prism-jsx';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar types = [\"video\", \"image\", \"embed\", \"figma\"];\n\nvar Asset = function Asset(_ref) {\n  var block = _ref.block,\n      mapImageUrl = _ref.mapImageUrl;\n  var value = block.value;\n  var type = block.value.type;\n\n  if (!types.includes(type)) {\n    return null;\n  }\n\n  var format = value.format;\n\n  var _ref2 = format !== null && format !== void 0 ? format : {},\n      _ref2$display_source = _ref2.display_source,\n      display_source = _ref2$display_source === void 0 ? undefined : _ref2$display_source,\n      _ref2$block_aspect_ra = _ref2.block_aspect_ratio,\n      block_aspect_ratio = _ref2$block_aspect_ra === void 0 ? undefined : _ref2$block_aspect_ra,\n      _ref2$block_height = _ref2.block_height,\n      block_height = _ref2$block_height === void 0 ? 1 : _ref2$block_height,\n      _ref2$block_width = _ref2.block_width,\n      block_width = _ref2$block_width === void 0 ? 1 : _ref2$block_width;\n\n  var aspectRatio = block_aspect_ratio || block_height / block_width;\n\n  if (type === \"embed\" || type === \"video\" || type === \"figma\") {\n    return createElement(\"div\", {\n      style: {\n        paddingBottom: aspectRatio * 100 + \"%\",\n        position: \"relative\"\n      }\n    }, createElement(\"iframe\", {\n      className: \"notion-image-inset\",\n      src: type === \"figma\" ? value.properties.source[0][0] : display_source\n    }));\n  }\n\n  if (block.value.type === \"image\") {\n    var _value$properties$cap;\n\n    var src = mapImageUrl(value.properties.source[0][0], block);\n    var caption = (_value$properties$cap = value.properties.caption) === null || _value$properties$cap === void 0 ? void 0 : _value$properties$cap[0][0];\n\n    if (block_aspect_ratio) {\n      return createElement(\"div\", {\n        style: {\n          paddingBottom: aspectRatio * 100 + \"%\",\n          position: \"relative\"\n        }\n      }, createElement(\"img\", {\n        className: \"notion-image-inset\",\n        alt: caption || \"notion image\",\n        src: src\n      }));\n    } else {\n      return createElement(\"img\", {\n        alt: caption,\n        src: src\n      });\n    }\n  }\n\n  return null;\n};\n\nvar Code = function Code(_ref) {\n  var code = _ref.code,\n      _ref$language = _ref.language,\n      language = _ref$language === void 0 ? \"javascript\" : _ref$language;\n  var languageL = language.toLowerCase();\n  var prismLanguage = languages[languageL] || languages.javascript;\n  var langClass = \"language-\" + language.toLowerCase();\n  return createElement(\"pre\", {\n    className: \"notion-code \" + langClass\n  }, createElement(\"code\", {\n    className: langClass,\n    dangerouslySetInnerHTML: {\n      __html: highlight(code, prismLanguage, language)\n    }\n  }));\n};\n\nvar classNames = function classNames() {\n  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n    classes[_key] = arguments[_key];\n  }\n\n  return classes.filter(function (a) {\n    return !!a;\n  }).join(\" \");\n};\n\nvar getTextContent = function getTextContent(text) {\n  return text.reduce(function (prev, current) {\n    return prev + current[0];\n  }, \"\");\n};\n\nvar groupBlockContent = function groupBlockContent(blockMap) {\n  var output = [];\n  var lastType = undefined;\n  var index = -1;\n  Object.keys(blockMap).forEach(function (id) {\n    var _blockMap$id$value$co;\n\n    (_blockMap$id$value$co = blockMap[id].value.content) === null || _blockMap$id$value$co === void 0 ? void 0 : _blockMap$id$value$co.forEach(function (blockId) {\n      var _blockMap$blockId, _blockMap$blockId$val;\n\n      var blockType = (_blockMap$blockId = blockMap[blockId]) === null || _blockMap$blockId === void 0 ? void 0 : (_blockMap$blockId$val = _blockMap$blockId.value) === null || _blockMap$blockId$val === void 0 ? void 0 : _blockMap$blockId$val.type;\n\n      if (blockType && blockType !== lastType) {\n        index++;\n        lastType = blockType;\n        output[index] = [];\n      }\n\n      output[index].push(blockId);\n    });\n    lastType = undefined;\n  });\n  return output;\n};\n\nvar getListNumber = function getListNumber(blockId, blockMap) {\n  var groups = groupBlockContent(blockMap);\n  var group = groups.find(function (g) {\n    return g.includes(blockId);\n  });\n\n  if (!group) {\n    return;\n  }\n\n  return group.indexOf(blockId) + 1;\n};\n\nvar defaultMapImageUrl = function defaultMapImageUrl(image, block) {\n  if (image === void 0) {\n    image = \"\";\n  }\n\n  var url = new URL(\"https://www.notion.so\" + (image.startsWith(\"/image\") ? image : \"/image/\" + encodeURIComponent(image)));\n\n  if (block && !image.includes(\"/images/page-cover/\")) {\n    var table = block.value.parent_table === \"space\" ? \"block\" : block.value.parent_table;\n    url.searchParams.set(\"table\", table);\n    url.searchParams.set(\"id\", block.value.id);\n    url.searchParams.set(\"cache\", \"v2\");\n  }\n\n  return url.toString();\n};\n\nvar defaultMapPageUrl = function defaultMapPageUrl(pageId) {\n  if (pageId === void 0) {\n    pageId = \"\";\n  }\n\n  pageId = pageId.replace(/-/g, \"\");\n  return \"/\" + pageId;\n};\n\nvar isIconBlock = function isIconBlock(value) {\n  return value.type === \"page\" || value.type === \"callout\";\n};\n\nvar PageIcon = function PageIcon(_ref) {\n  var _block$value$format, _block$value$properti;\n\n  var block = _ref.block,\n      className = _ref.className,\n      big = _ref.big,\n      mapImageUrl = _ref.mapImageUrl;\n\n  if (!isIconBlock(block.value)) {\n    return null;\n  }\n\n  var icon = (_block$value$format = block.value.format) === null || _block$value$format === void 0 ? void 0 : _block$value$format.page_icon;\n  var title = (_block$value$properti = block.value.properties) === null || _block$value$properti === void 0 ? void 0 : _block$value$properti.title;\n\n  if (icon === null || icon === void 0 ? void 0 : icon.includes(\"http\")) {\n    var url = mapImageUrl(icon, block);\n    return createElement(\"img\", {\n      className: classNames(className, big ? \"notion-page-icon-cover\" : \"notion-page-icon\"),\n      src: url,\n      alt: title ? getTextContent(title) : \"Icon\"\n    });\n  } else {\n    return createElement(\"span\", {\n      className: classNames(className, \"notion-emoji\", big ? \"notion-page-icon-cover\" : \"notion-page-icon\"),\n      role: \"img\",\n      \"aria-label\": icon\n    }, icon);\n  }\n};\n\nvar PageHeader = function PageHeader(_ref) {\n  var blockMap = _ref.blockMap,\n      mapPageUrl = _ref.mapPageUrl,\n      mapImageUrl = _ref.mapImageUrl;\n  var blockIds = Object.keys(blockMap);\n  var activePageId = blockIds[0];\n\n  if (!activePageId) {\n    return null;\n  }\n\n  var breadcrumbs = [];\n  var currentPageId = activePageId;\n\n  do {\n    var _block$value$properti, _block$value$format;\n\n    var block = blockMap[currentPageId];\n\n    if (!block || !block.value) {\n      break;\n    }\n\n    var title = (_block$value$properti = block.value.properties) === null || _block$value$properti === void 0 ? void 0 : _block$value$properti.title[0][0];\n    var icon = (_block$value$format = block.value.format) === null || _block$value$format === void 0 ? void 0 : _block$value$format.page_icon;\n\n    if (!(title || icon)) {\n      break;\n    }\n\n    breadcrumbs.push({\n      block: block,\n      active: currentPageId === activePageId,\n      pageId: currentPageId,\n      title: title,\n      icon: icon\n    });\n    var parentId = block.value.parent_id;\n\n    if (!parentId) {\n      break;\n    }\n\n    currentPageId = parentId;\n  } while (true);\n\n  breadcrumbs.reverse();\n  return createElement(\"header\", {\n    className: \"notion-page-header\"\n  }, createElement(\"div\", {\n    className: \"notion-nav-breadcrumbs\"\n  }, breadcrumbs.map(function (breadcrumb, index) {\n    return createElement(Fragment, {\n      key: breadcrumb.pageId\n    }, createElement(\"a\", {\n      className: \"notion-nav-breadcrumb \" + (breadcrumb.active ? \"notion-nav-breadcrumb-active\" : \"\"),\n      href: breadcrumb.active ? undefined : mapPageUrl(breadcrumb.pageId)\n    }, breadcrumb.icon && createElement(PageIcon, {\n      className: \"notion-nav-icon\",\n      block: breadcrumb.block,\n      mapImageUrl: mapImageUrl\n    }), breadcrumb.title && createElement(\"span\", {\n      className: \"notion-nav-title\"\n    }, breadcrumb.title)), index < breadcrumbs.length - 1 && createElement(\"span\", {\n      className: \"notion-nav-spacer\"\n    }, \"/\"));\n  })));\n};\n\nvar createRenderChildText = function createRenderChildText(customDecoratorComponents) {\n  return function (properties) {\n    return properties === null || properties === void 0 ? void 0 : properties.map(function (_ref, i) {\n      var text = _ref[0],\n          decorations = _ref[1];\n\n      if (!decorations) {\n        return createElement(Fragment, {\n          key: i\n        }, text);\n      }\n\n      return decorations.reduceRight(function (element, decorator) {\n        var renderText = function renderText() {\n          switch (decorator[0]) {\n            case \"h\":\n              return createElement(\"span\", {\n                key: i,\n                className: \"notion-\" + decorator[1]\n              }, element);\n\n            case \"c\":\n              return createElement(\"code\", {\n                key: i,\n                className: \"notion-inline-code\"\n              }, element);\n\n            case \"b\":\n              return createElement(\"b\", {\n                key: i\n              }, element);\n\n            case \"i\":\n              return createElement(\"em\", {\n                key: i\n              }, element);\n\n            case \"s\":\n              return createElement(\"s\", {\n                key: i\n              }, element);\n\n            case \"a\":\n              return createElement(\"a\", {\n                className: \"notion-link\",\n                href: decorator[1],\n                key: i\n              }, element);\n\n            default:\n              return createElement(Fragment, {\n                key: i\n              }, element);\n          }\n        };\n\n        var CustomComponent = customDecoratorComponents === null || customDecoratorComponents === void 0 ? void 0 : customDecoratorComponents[decorator[0]];\n\n        if (CustomComponent) {\n          var props = decorator[1] ? {\n            decoratorValue: decorator[1]\n          } : {};\n          return createElement(CustomComponent, Object.assign({\n            key: i\n          }, props, {\n            renderComponent: renderText\n          }), text);\n        }\n\n        return renderText();\n      }, createElement(Fragment, null, text));\n    });\n  };\n};\n\nvar Block = function Block(props) {\n  var block = props.block,\n      children = props.children,\n      level = props.level,\n      fullPage = props.fullPage,\n      hideHeader = props.hideHeader,\n      blockMap = props.blockMap,\n      mapPageUrl = props.mapPageUrl,\n      mapImageUrl = props.mapImageUrl,\n      customBlockComponents = props.customBlockComponents,\n      customDecoratorComponents = props.customDecoratorComponents;\n  var blockValue = block === null || block === void 0 ? void 0 : block.value;\n\n  var renderComponent = function renderComponent() {\n    var _blockValue$format, _block$collection, _block$collection2, _collectionView$forma, _collectionView$forma2, _block$collection4, _block$collection6, _blockValue$propertie, _blockValue$format2, _blockValue$format3, _blockValue$format4;\n\n    var renderChildText = createRenderChildText(customDecoratorComponents);\n\n    switch (blockValue === null || blockValue === void 0 ? void 0 : blockValue.type) {\n      case \"page\":\n        if (level === 0) {\n          if (fullPage) {\n            if (!blockValue.properties) {\n              return null;\n            }\n\n            var _ref2 = blockValue.format || {},\n                page_icon = _ref2.page_icon,\n                page_cover = _ref2.page_cover,\n                page_cover_position = _ref2.page_cover_position,\n                page_full_width = _ref2.page_full_width,\n                page_small_text = _ref2.page_small_text;\n\n            var coverPosition = (1 - (page_cover_position || 0.5)) * 100;\n            return createElement(\"div\", {\n              className: \"notion\"\n            }, !hideHeader && createElement(PageHeader, {\n              blockMap: blockMap,\n              mapPageUrl: mapPageUrl,\n              mapImageUrl: mapImageUrl\n            }), page_cover && createElement(\"img\", {\n              src: mapImageUrl(page_cover, block),\n              alt: getTextContent(blockValue.properties.title),\n              className: \"notion-page-cover\",\n              style: {\n                objectPosition: \"center \" + coverPosition + \"%\"\n              }\n            }), createElement(\"main\", {\n              className: classNames(\"notion-page\", !page_cover && \"notion-page-offset\", page_full_width && \"notion-full-width\", page_small_text && \"notion-small-text\")\n            }, page_icon && createElement(PageIcon, {\n              className: page_cover ? \"notion-page-icon-offset\" : undefined,\n              block: block,\n              big: true,\n              mapImageUrl: mapImageUrl\n            }), createElement(\"div\", {\n              className: \"notion-title\"\n            }, renderChildText(blockValue.properties.title)), children));\n          } else {\n            return createElement(\"main\", {\n              className: \"notion\"\n            }, children);\n          }\n        } else {\n          if (!blockValue.properties) return null;\n          return createElement(\"a\", {\n            className: \"notion-page-link\",\n            href: mapPageUrl(blockValue.id)\n          }, blockValue.format && createElement(\"div\", {\n            className: \"notion-page-icon\"\n          }, createElement(PageIcon, {\n            block: block,\n            mapImageUrl: mapImageUrl\n          })), createElement(\"div\", {\n            className: \"notion-page-text\"\n          }, renderChildText(blockValue.properties.title)));\n        }\n\n      case \"header\":\n        if (!blockValue.properties) return null;\n        return createElement(\"h1\", {\n          className: \"notion-h1\"\n        }, renderChildText(blockValue.properties.title));\n\n      case \"sub_header\":\n        if (!blockValue.properties) return null;\n        return createElement(\"h2\", {\n          className: \"notion-h2\"\n        }, renderChildText(blockValue.properties.title));\n\n      case \"sub_sub_header\":\n        if (!blockValue.properties) return null;\n        return createElement(\"h3\", {\n          className: \"notion-h3\"\n        }, renderChildText(blockValue.properties.title));\n\n      case \"divider\":\n        return createElement(\"hr\", {\n          className: \"notion-hr\"\n        });\n\n      case \"text\":\n        if (!blockValue.properties) {\n          return createElement(\"div\", {\n            className: \"notion-blank\"\n          }, \"\\xA0\");\n        }\n\n        var blockColor = (_blockValue$format = blockValue.format) === null || _blockValue$format === void 0 ? void 0 : _blockValue$format.block_color;\n        return createElement(\"p\", {\n          className: classNames(\"notion-text\", blockColor && \"notion-\" + blockColor)\n        }, renderChildText(blockValue.properties.title));\n\n      case \"bulleted_list\":\n      case \"numbered_list\":\n        var wrapList = function wrapList(content, start) {\n          return blockValue.type === \"bulleted_list\" ? createElement(\"ul\", {\n            className: \"notion-list notion-list-disc\"\n          }, content) : createElement(\"ol\", {\n            start: start,\n            className: \"notion-list notion-list-numbered\"\n          }, content);\n        };\n\n        var output = null;\n\n        if (blockValue.content) {\n          output = createElement(Fragment, null, blockValue.properties && createElement(\"li\", null, renderChildText(blockValue.properties.title)), wrapList(children));\n        } else {\n          output = blockValue.properties ? createElement(\"li\", null, renderChildText(blockValue.properties.title)) : null;\n        }\n\n        var isTopLevel = block.value.type !== blockMap[block.value.parent_id].value.type;\n        var start = getListNumber(blockValue.id, blockMap);\n        return isTopLevel ? wrapList(output, start) : output;\n\n      case \"image\":\n      case \"embed\":\n      case \"figma\":\n      case \"video\":\n        var value = block.value;\n        return createElement(\"figure\", {\n          className: \"notion-asset-wrapper\",\n          style: value.format !== undefined ? {\n            width: value.format.block_width\n          } : undefined\n        }, createElement(Asset, {\n          block: block,\n          mapImageUrl: mapImageUrl\n        }), value.properties.caption && createElement(\"figcaption\", {\n          className: \"notion-image-caption\"\n        }, renderChildText(value.properties.caption)));\n\n      case \"code\":\n        {\n          if (blockValue.properties.title) {\n            var content = blockValue.properties.title[0][0];\n            var language = blockValue.properties.language[0][0];\n            return createElement(Code, {\n              key: blockValue.id,\n              language: language || \"\",\n              code: content\n            });\n          }\n\n          break;\n        }\n\n      case \"column_list\":\n        return createElement(\"div\", {\n          className: \"notion-row\"\n        }, children);\n\n      case \"column\":\n        var spacerWith = 46;\n        var ratio = blockValue.format.column_ratio;\n        var columns = Number((1 / ratio).toFixed(0));\n        var spacerTotalWith = (columns - 1) * spacerWith;\n        var width = \"calc((100% - \" + spacerTotalWith + \"px) * \" + ratio + \")\";\n        return createElement(Fragment, null, createElement(\"div\", {\n          className: \"notion-column\",\n          style: {\n            width: width\n          }\n        }, children), createElement(\"div\", {\n          className: \"notion-spacer\",\n          style: {\n            width: spacerWith\n          }\n        }));\n\n      case \"quote\":\n        if (!blockValue.properties) return null;\n        return createElement(\"blockquote\", {\n          className: \"notion-quote\"\n        }, renderChildText(blockValue.properties.title));\n\n      case \"collection_view\":\n        if (!block) return null;\n        var collectionView = block === null || block === void 0 ? void 0 : (_block$collection = block.collection) === null || _block$collection === void 0 ? void 0 : _block$collection.types[0];\n        return createElement(\"div\", null, createElement(\"h3\", {\n          className: \"notion-h3\"\n        }, renderChildText((_block$collection2 = block.collection) === null || _block$collection2 === void 0 ? void 0 : _block$collection2.title)), (collectionView === null || collectionView === void 0 ? void 0 : collectionView.type) === \"table\" && createElement(\"div\", {\n          style: {\n            maxWidth: \"100%\",\n            marginTop: 5\n          }\n        }, createElement(\"table\", {\n          className: \"notion-table\"\n        }, createElement(\"thead\", null, createElement(\"tr\", {\n          className: \"notion-tr\"\n        }, (_collectionView$forma = collectionView.format) === null || _collectionView$forma === void 0 ? void 0 : (_collectionView$forma2 = _collectionView$forma.table_properties) === null || _collectionView$forma2 === void 0 ? void 0 : _collectionView$forma2.filter(function (p) {\n          return p.visible;\n        }).map(function (gp, index) {\n          var _block$collection3, _block$collection3$sc;\n\n          return createElement(\"th\", {\n            className: \"notion-th\",\n            key: index,\n            style: {\n              minWidth: gp.width\n            }\n          }, (_block$collection3 = block.collection) === null || _block$collection3 === void 0 ? void 0 : (_block$collection3$sc = _block$collection3.schema[gp.property]) === null || _block$collection3$sc === void 0 ? void 0 : _block$collection3$sc.name);\n        }))), createElement(\"tbody\", null, block === null || block === void 0 ? void 0 : (_block$collection4 = block.collection) === null || _block$collection4 === void 0 ? void 0 : _block$collection4.data.map(function (row, index) {\n          var _collectionView$forma3, _collectionView$forma4;\n\n          return createElement(\"tr\", {\n            className: \"notion-tr\",\n            key: index\n          }, (_collectionView$forma3 = collectionView.format) === null || _collectionView$forma3 === void 0 ? void 0 : (_collectionView$forma4 = _collectionView$forma3.table_properties) === null || _collectionView$forma4 === void 0 ? void 0 : _collectionView$forma4.filter(function (p) {\n            return p.visible;\n          }).map(function (gp, index) {\n            var _block$collection5, _block$collection5$sc;\n\n            return createElement(\"td\", {\n              key: index,\n              className: \"notion-td \" + (gp.property === \"title\" ? \"notion-bold\" : \"\")\n            }, renderChildText(row[(_block$collection5 = block.collection) === null || _block$collection5 === void 0 ? void 0 : (_block$collection5$sc = _block$collection5.schema[gp.property]) === null || _block$collection5$sc === void 0 ? void 0 : _block$collection5$sc.name]));\n          }));\n        })))), (collectionView === null || collectionView === void 0 ? void 0 : collectionView.type) === \"gallery\" && createElement(\"div\", {\n          className: \"notion-gallery\"\n        }, (_block$collection6 = block.collection) === null || _block$collection6 === void 0 ? void 0 : _block$collection6.data.map(function (row, i) {\n          var _collectionView$forma5, _collectionView$forma6;\n\n          return createElement(\"div\", {\n            key: \"col-\" + i,\n            className: \"notion-gallery-card\"\n          }, createElement(\"div\", {\n            className: \"notion-gallery-content\"\n          }, (_collectionView$forma5 = collectionView.format) === null || _collectionView$forma5 === void 0 ? void 0 : (_collectionView$forma6 = _collectionView$forma5.gallery_properties) === null || _collectionView$forma6 === void 0 ? void 0 : _collectionView$forma6.filter(function (p) {\n            return p.visible;\n          }).map(function (gp, idx) {\n            var _block$collection7;\n\n            return createElement(\"p\", {\n              key: idx + \"item\",\n              className: \"notion-gallery-data \" + (idx === 0 ? \"is-first\" : \"\")\n            }, getTextContent(row[(_block$collection7 = block.collection) === null || _block$collection7 === void 0 ? void 0 : _block$collection7.schema[gp.property].name]));\n          })));\n        })));\n\n      case \"callout\":\n        return createElement(\"div\", {\n          className: classNames(\"notion-callout\", blockValue.format.block_color && \"notion-\" + blockValue.format.block_color + \"_co\")\n        }, createElement(\"div\", null, createElement(PageIcon, {\n          block: block,\n          mapImageUrl: mapImageUrl\n        })), createElement(\"div\", {\n          className: \"notion-callout-text\"\n        }, renderChildText(blockValue.properties.title)));\n\n      case \"bookmark\":\n        var link = blockValue.properties.link;\n        var title = (_blockValue$propertie = blockValue.properties.title) !== null && _blockValue$propertie !== void 0 ? _blockValue$propertie : link;\n        var description = blockValue.properties.description;\n        var block_color = (_blockValue$format2 = blockValue.format) === null || _blockValue$format2 === void 0 ? void 0 : _blockValue$format2.block_color;\n        var bookmark_icon = (_blockValue$format3 = blockValue.format) === null || _blockValue$format3 === void 0 ? void 0 : _blockValue$format3.bookmark_icon;\n        var bookmark_cover = (_blockValue$format4 = blockValue.format) === null || _blockValue$format4 === void 0 ? void 0 : _blockValue$format4.bookmark_cover;\n        return createElement(\"div\", {\n          className: \"notion-row\"\n        }, createElement(\"a\", {\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          className: classNames(\"notion-bookmark\", block_color && \"notion-\" + block_color),\n          href: link[0][0]\n        }, createElement(\"div\", null, createElement(\"div\", {\n          className: \"notion-bookmark-title\"\n        }, renderChildText(title)), description && createElement(\"div\", {\n          className: \"notion-bookmark-description\"\n        }, renderChildText(description)), createElement(\"div\", {\n          className: \"notion-bookmark-link\"\n        }, bookmark_icon && createElement(\"img\", {\n          src: bookmark_icon,\n          alt: getTextContent(title)\n        }), createElement(\"div\", null, renderChildText(link)))), bookmark_cover && createElement(\"div\", {\n          className: \"notion-bookmark-image\"\n        }, createElement(\"img\", {\n          src: bookmark_cover,\n          alt: getTextContent(title)\n        }))));\n\n      case \"toggle\":\n        return createElement(\"details\", {\n          className: \"notion-toggle\"\n        }, createElement(\"summary\", null, renderChildText(blockValue.properties.title)), createElement(\"div\", null, children));\n\n      default:\n        if (process.env.NODE_ENV !== \"production\") {\n          var _block$value;\n\n          console.log(\"Unsupported type \" + (block === null || block === void 0 ? void 0 : (_block$value = block.value) === null || _block$value === void 0 ? void 0 : _block$value.type));\n        }\n\n        return createElement(\"div\", null);\n    }\n\n    return null;\n  }; // render a custom component first if passed.\n\n\n  if (customBlockComponents && customBlockComponents[blockValue === null || blockValue === void 0 ? void 0 : blockValue.type] && // Do not use custom component for base page block\n  level !== 0) {\n    var CustomComponent = customBlockComponents[blockValue === null || blockValue === void 0 ? void 0 : blockValue.type];\n    return createElement(CustomComponent, {\n      renderComponent: renderComponent,\n      blockValue: blockValue,\n      level: level\n    }, children);\n  }\n\n  return renderComponent();\n};\n\nvar NotionRenderer = function NotionRenderer(_ref) {\n  var _currentBlock$value, _currentBlock$value$c;\n\n  var _ref$level = _ref.level,\n      level = _ref$level === void 0 ? 0 : _ref$level,\n      currentId = _ref.currentId,\n      _ref$mapPageUrl = _ref.mapPageUrl,\n      mapPageUrl = _ref$mapPageUrl === void 0 ? defaultMapPageUrl : _ref$mapPageUrl,\n      _ref$mapImageUrl = _ref.mapImageUrl,\n      mapImageUrl = _ref$mapImageUrl === void 0 ? defaultMapImageUrl : _ref$mapImageUrl,\n      props = _objectWithoutPropertiesLoose(_ref, [\"level\", \"currentId\", \"mapPageUrl\", \"mapImageUrl\"]);\n\n  var blockMap = props.blockMap;\n  var id = currentId || Object.keys(blockMap)[0];\n  var currentBlock = blockMap[id];\n\n  if (!currentBlock) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\"error rendering block\", currentId);\n    }\n\n    return null;\n  }\n\n  return React__default.createElement(Block, Object.assign({\n    key: id,\n    level: level,\n    block: currentBlock,\n    mapPageUrl: mapPageUrl,\n    mapImageUrl: mapImageUrl\n  }, props), currentBlock === null || currentBlock === void 0 ? void 0 : (_currentBlock$value = currentBlock.value) === null || _currentBlock$value === void 0 ? void 0 : (_currentBlock$value$c = _currentBlock$value.content) === null || _currentBlock$value$c === void 0 ? void 0 : _currentBlock$value$c.map(function (contentId) {\n    return React__default.createElement(NotionRenderer, Object.assign({\n      key: contentId,\n      currentId: contentId,\n      level: level + 1,\n      mapPageUrl: mapPageUrl,\n      mapImageUrl: mapImageUrl\n    }, props));\n  }));\n};\n\nexport { NotionRenderer, classNames, defaultMapImageUrl, defaultMapPageUrl, getListNumber, getTextContent };","map":{"version":3,"sources":["../src/components/asset.tsx","../src/components/code.tsx","../src/utils.ts","../src/components/page-icon.tsx","../src/components/page-header.tsx","../src/block.tsx","../src/renderer.tsx"],"names":["types","Asset","block","mapImageUrl","value","type","format","display_source","undefined","block_aspect_ratio","block_height","block_width","aspectRatio","style","paddingBottom","position","className","src","caption","alt","Code","code","language","languageL","prismLanguage","languages","langClass","dangerouslySetInnerHTML","__html","highlight","classNames","classes","getTextContent","prev","current","groupBlockContent","output","lastType","index","Object","blockType","blockMap","getListNumber","groups","group","g","defaultMapImageUrl","image","url","encodeURIComponent","table","defaultMapPageUrl","pageId","isIconBlock","PageIcon","big","icon","title","role","PageHeader","mapPageUrl","blockIds","activePageId","breadcrumbs","currentPageId","active","parentId","key","breadcrumb","href","createRenderChildText","text","decorations","i","renderText","decorator","CustomComponent","customDecoratorComponents","props","decoratorValue","renderComponent","React","Block","children","level","fullPage","hideHeader","customBlockComponents","blockValue","renderChildText","page_icon","page_cover","page_cover_position","page_full_width","page_small_text","coverPosition","objectPosition","blockColor","wrapList","start","isTopLevel","width","content","id","spacerWith","ratio","columns","Number","spacerTotalWith","collectionView","maxWidth","marginTop","p","minWidth","gp","row","idx","link","description","block_color","bookmark_icon","bookmark_cover","target","rel","process","console","NotionRenderer","currentId","currentBlock","contentId"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { BlockType, ContentValueType, MapImageUrl } from \"../types\";\n\nconst types = [\"video\", \"image\", \"embed\", \"figma\"];\n\nconst Asset: React.FC<{\n  block: BlockType;\n  mapImageUrl: MapImageUrl;\n}> = ({ block, mapImageUrl }) => {\n  const value = block.value as ContentValueType;\n  const type = block.value.type;\n\n  if (!types.includes(type)) {\n    return null;\n  }\n\n  const format = value.format;\n  const {\n    display_source = undefined,\n    block_aspect_ratio = undefined,\n    block_height = 1,\n    block_width = 1\n  } = format ?? {};\n\n  const aspectRatio = block_aspect_ratio || block_height / block_width;\n\n  if (type === \"embed\" || type === \"video\" || type === \"figma\") {\n    return (\n      <div\n        style={{\n          paddingBottom: `${aspectRatio * 100}%`,\n          position: \"relative\"\n        }}\n      >\n        <iframe\n          className=\"notion-image-inset\"\n          src={\n            type === \"figma\" ? value.properties.source[0][0] : display_source\n          }\n        />\n      </div>\n    );\n  }\n\n  if (block.value.type === \"image\") {\n    const src = mapImageUrl(value.properties.source[0][0], block);\n    const caption = value.properties.caption?.[0][0];\n\n    if (block_aspect_ratio) {\n      return (\n        <div\n          style={{\n            paddingBottom: `${aspectRatio * 100}%`,\n            position: \"relative\"\n          }}\n        >\n          <img\n            className=\"notion-image-inset\"\n            alt={caption || \"notion image\"}\n            src={src}\n          />\n        </div>\n      );\n    } else {\n      return <img alt={caption} src={src} />;\n    }\n  }\n\n  return null;\n};\n\nexport default Asset;\n","import * as React from \"react\";\nimport { highlight, languages } from \"prismjs\";\nimport \"prismjs/components/prism-jsx\";\n\nconst Code: React.FC<{ code: string; language: string }> = ({\n  code,\n  language = \"javascript\"\n}) => {\n  const languageL = language.toLowerCase();\n  const prismLanguage = languages[languageL] || languages.javascript;\n\n  const langClass = `language-${language.toLowerCase()}`;\n\n  return (\n    <pre className={`notion-code ${langClass}`}>\n      <code\n        className={langClass}\n        dangerouslySetInnerHTML={{\n          __html: highlight(code, prismLanguage, language)\n        }}\n      />\n    </pre>\n  );\n};\n\nexport default Code;\n","import { DecorationType, BlockMapType, MapImageUrl } from \"./types\";\n\nexport const classNames = (...classes: Array<string | undefined | false>) =>\n  classes.filter(a => !!a).join(\" \");\n\nexport const getTextContent = (text: DecorationType[]) => {\n  return text.reduce((prev, current) => prev + current[0], \"\");\n};\n\nconst groupBlockContent = (blockMap: BlockMapType): string[][] => {\n  const output: string[][] = [];\n\n  let lastType: string | undefined = undefined;\n  let index = -1;\n\n  Object.keys(blockMap).forEach(id => {\n    blockMap[id].value.content?.forEach(blockId => {\n      const blockType = blockMap[blockId]?.value?.type;\n\n      if (blockType && blockType !== lastType) {\n        index++;\n        lastType = blockType;\n        output[index] = [];\n      }\n\n      output[index].push(blockId);\n    });\n\n    lastType = undefined;\n  });\n\n  return output;\n};\n\nexport const getListNumber = (blockId: string, blockMap: BlockMapType) => {\n  const groups = groupBlockContent(blockMap);\n  const group = groups.find(g => g.includes(blockId));\n\n  if (!group) {\n    return;\n  }\n\n  return group.indexOf(blockId) + 1;\n};\n\nexport const defaultMapImageUrl: MapImageUrl = (image = \"\", block) => {\n  const url = new URL(\n    `https://www.notion.so${\n      image.startsWith(\"/image\") ? image : `/image/${encodeURIComponent(image)}`\n    }`\n  );\n\n  if (block && !image.includes(\"/images/page-cover/\")) {\n    const table =\n      block.value.parent_table === \"space\" ? \"block\" : block.value.parent_table;\n    url.searchParams.set(\"table\", table);\n    url.searchParams.set(\"id\", block.value.id);\n    url.searchParams.set(\"cache\", \"v2\");\n  }\n\n  return url.toString();\n};\n\nexport const defaultMapPageUrl = (pageId: string = \"\") => {\n  pageId = pageId.replace(/-/g, \"\");\n\n  return `/${pageId}`;\n};\n","import * as React from \"react\";\nimport {\n  BlockType,\n  PageValueType,\n  BlockValueType,\n  CalloutValueType,\n  MapImageUrl\n} from \"../types\";\nimport { getTextContent, classNames } from \"../utils\";\n\nconst isIconBlock = (\n  value: BlockValueType\n): value is PageValueType | CalloutValueType => {\n  return value.type === \"page\" || value.type === \"callout\";\n};\n\ninterface AssetProps {\n  block: BlockType;\n  mapImageUrl: MapImageUrl;\n  big?: boolean;\n  className?: string;\n}\n\nconst PageIcon: React.FC<AssetProps> = ({\n  block,\n  className,\n  big,\n  mapImageUrl\n}) => {\n  if (!isIconBlock(block.value)) {\n    return null;\n  }\n  const icon = block.value.format?.page_icon;\n  const title = block.value.properties?.title;\n\n  if (icon?.includes(\"http\")) {\n    const url = mapImageUrl(icon, block);\n\n    return (\n      <img\n        className={classNames(\n          className,\n          big ? \"notion-page-icon-cover\" : \"notion-page-icon\"\n        )}\n        src={url}\n        alt={title ? getTextContent(title) : \"Icon\"}\n      />\n    );\n  } else {\n    return (\n      <span\n        className={classNames(\n          className,\n          \"notion-emoji\",\n          big ? \"notion-page-icon-cover\" : \"notion-page-icon\"\n        )}\n        role=\"img\"\n        aria-label={icon}\n      >\n        {icon}\n      </span>\n    );\n  }\n};\n\nexport default PageIcon;\n","import * as React from \"react\";\n\nimport { BlockMapType, MapPageUrl, MapImageUrl } from \"../types\";\nimport PageIcon from \"./page-icon\";\n\ninterface PageHeaderProps {\n  blockMap: BlockMapType;\n  mapPageUrl: MapPageUrl;\n  mapImageUrl: MapImageUrl;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  blockMap,\n  mapPageUrl,\n  mapImageUrl\n}) => {\n  const blockIds = Object.keys(blockMap);\n  const activePageId = blockIds[0];\n\n  if (!activePageId) {\n    return null;\n  }\n\n  const breadcrumbs = [];\n  let currentPageId = activePageId;\n\n  do {\n    const block = blockMap[currentPageId];\n    if (!block || !block.value) {\n      break;\n    }\n\n    const title = block.value.properties?.title[0][0];\n    const icon = (block.value as any).format?.page_icon;\n\n    if (!(title || icon)) {\n      break;\n    }\n\n    breadcrumbs.push({\n      block,\n      active: currentPageId === activePageId,\n      pageId: currentPageId,\n      title,\n      icon\n    });\n\n    const parentId = block.value.parent_id;\n\n    if (!parentId) {\n      break;\n    }\n\n    currentPageId = parentId;\n  } while (true);\n\n  breadcrumbs.reverse();\n\n  return (\n    <header className=\"notion-page-header\">\n      <div className=\"notion-nav-breadcrumbs\">\n        {breadcrumbs.map((breadcrumb, index) => (\n          <React.Fragment key={breadcrumb.pageId}>\n            <a\n              className={`notion-nav-breadcrumb ${\n                breadcrumb.active ? \"notion-nav-breadcrumb-active\" : \"\"\n              }`}\n              href={\n                breadcrumb.active ? undefined : mapPageUrl(breadcrumb.pageId)\n              }\n            >\n              {breadcrumb.icon && (\n                <PageIcon\n                  className=\"notion-nav-icon\"\n                  block={breadcrumb.block}\n                  mapImageUrl={mapImageUrl}\n                />\n              )}\n\n              {breadcrumb.title && (\n                <span className=\"notion-nav-title\">{breadcrumb.title}</span>\n              )}\n            </a>\n\n            {index < breadcrumbs.length - 1 && (\n              <span className=\"notion-nav-spacer\">/</span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </header>\n  );\n};\n\nexport default PageHeader;\n","import * as React from \"react\";\nimport {\n  DecorationType,\n  BlockType,\n  ContentValueType,\n  BlockMapType,\n  MapPageUrl,\n  MapImageUrl,\n  CustomBlockComponents,\n  BlockValueProp,\n  CustomDecoratorComponents,\n  CustomDecoratorComponentProps\n} from \"./types\";\nimport Asset from \"./components/asset\";\nimport Code from \"./components/code\";\nimport PageIcon from \"./components/page-icon\";\nimport PageHeader from \"./components/page-header\";\nimport { classNames, getTextContent, getListNumber } from \"./utils\";\n\nexport const createRenderChildText = (\n  customDecoratorComponents?: CustomDecoratorComponents\n) => (properties: DecorationType[]) => {\n  return properties?.map(([text, decorations], i) => {\n    if (!decorations) {\n      return <React.Fragment key={i}>{text}</React.Fragment>;\n    }\n\n    return decorations.reduceRight((element, decorator) => {\n      const renderText = () => {\n        switch (decorator[0]) {\n          case \"h\":\n            return (\n              <span key={i} className={`notion-${decorator[1]}`}>\n                {element}\n              </span>\n            );\n          case \"c\":\n            return (\n              <code key={i} className=\"notion-inline-code\">\n                {element}\n              </code>\n            );\n          case \"b\":\n            return <b key={i}>{element}</b>;\n          case \"i\":\n            return <em key={i}>{element}</em>;\n          case \"s\":\n            return <s key={i}>{element}</s>;\n          case \"a\":\n            return (\n              <a className=\"notion-link\" href={decorator[1]} key={i}>\n                {element}\n              </a>\n            );\n\n          default:\n            return <React.Fragment key={i}>{element}</React.Fragment>;\n        }\n      };\n\n      const CustomComponent = customDecoratorComponents?.[decorator[0]];\n\n      if (CustomComponent) {\n        const props = (decorator[1]\n          ? {\n              decoratorValue: decorator[1]\n            }\n          : {}) as CustomDecoratorComponentProps<typeof decorator[0]>;\n\n        return (\n          <CustomComponent\n            key={i}\n            {...(props as any)}\n            renderComponent={renderText}\n          >\n            {text}\n          </CustomComponent>\n        );\n      }\n\n      return renderText();\n    }, <>{text}</>);\n  });\n};\n\ninterface Block {\n  block: BlockType;\n  level: number;\n  blockMap: BlockMapType;\n  mapPageUrl: MapPageUrl;\n  mapImageUrl: MapImageUrl;\n\n  fullPage?: boolean;\n  hideHeader?: boolean;\n  customBlockComponents?: CustomBlockComponents;\n  customDecoratorComponents?: CustomDecoratorComponents;\n}\n\nexport const Block: React.FC<Block> = props => {\n  const {\n    block,\n    children,\n    level,\n    fullPage,\n    hideHeader,\n    blockMap,\n    mapPageUrl,\n    mapImageUrl,\n    customBlockComponents,\n    customDecoratorComponents\n  } = props;\n  const blockValue = block?.value;\n\n  const renderComponent = () => {\n    const renderChildText = createRenderChildText(customDecoratorComponents);\n\n    switch (blockValue?.type) {\n      case \"page\":\n        if (level === 0) {\n          if (fullPage) {\n            if (!blockValue.properties) {\n              return null;\n            }\n\n            const {\n              page_icon,\n              page_cover,\n              page_cover_position,\n              page_full_width,\n              page_small_text\n            } = blockValue.format || {};\n\n            const coverPosition = (1 - (page_cover_position || 0.5)) * 100;\n\n            return (\n              <div className=\"notion\">\n                {!hideHeader && (\n                  <PageHeader\n                    blockMap={blockMap}\n                    mapPageUrl={mapPageUrl}\n                    mapImageUrl={mapImageUrl}\n                  />\n                )}\n                {page_cover && (\n                  <img\n                    src={mapImageUrl(page_cover, block)}\n                    alt={getTextContent(blockValue.properties.title)}\n                    className=\"notion-page-cover\"\n                    style={{\n                      objectPosition: `center ${coverPosition}%`\n                    }}\n                  />\n                )}\n                <main\n                  className={classNames(\n                    \"notion-page\",\n                    !page_cover && \"notion-page-offset\",\n                    page_full_width && \"notion-full-width\",\n                    page_small_text && \"notion-small-text\"\n                  )}\n                >\n                  {page_icon && (\n                    <PageIcon\n                      className={\n                        page_cover ? \"notion-page-icon-offset\" : undefined\n                      }\n                      block={block}\n                      big\n                      mapImageUrl={mapImageUrl}\n                    />\n                  )}\n\n                  <div className=\"notion-title\">\n                    {renderChildText(blockValue.properties.title)}\n                  </div>\n\n                  {children}\n                </main>\n              </div>\n            );\n          } else {\n            return <main className=\"notion\">{children}</main>;\n          }\n        } else {\n          if (!blockValue.properties) return null;\n          return (\n            <a className=\"notion-page-link\" href={mapPageUrl(blockValue.id)}>\n              {blockValue.format && (\n                <div className=\"notion-page-icon\">\n                  <PageIcon block={block} mapImageUrl={mapImageUrl} />\n                </div>\n              )}\n              <div className=\"notion-page-text\">\n                {renderChildText(blockValue.properties.title)}\n              </div>\n            </a>\n          );\n        }\n      case \"header\":\n        if (!blockValue.properties) return null;\n        return (\n          <h1 className=\"notion-h1\">\n            {renderChildText(blockValue.properties.title)}\n          </h1>\n        );\n      case \"sub_header\":\n        if (!blockValue.properties) return null;\n        return (\n          <h2 className=\"notion-h2\">\n            {renderChildText(blockValue.properties.title)}\n          </h2>\n        );\n      case \"sub_sub_header\":\n        if (!blockValue.properties) return null;\n        return (\n          <h3 className=\"notion-h3\">\n            {renderChildText(blockValue.properties.title)}\n          </h3>\n        );\n      case \"divider\":\n        return <hr className=\"notion-hr\" />;\n      case \"text\":\n        if (!blockValue.properties) {\n          return <div className=\"notion-blank\">&nbsp;</div>;\n        }\n        const blockColor = blockValue.format?.block_color;\n        return (\n          <p\n            className={classNames(\n              `notion-text`,\n              blockColor && `notion-${blockColor}`\n            )}\n          >\n            {renderChildText(blockValue.properties.title)}\n          </p>\n        );\n      case \"bulleted_list\":\n      case \"numbered_list\":\n        const wrapList = (content: React.ReactNode, start?: number) =>\n          blockValue.type === \"bulleted_list\" ? (\n            <ul className=\"notion-list notion-list-disc\">{content}</ul>\n          ) : (\n            <ol start={start} className=\"notion-list notion-list-numbered\">\n              {content}\n            </ol>\n          );\n\n        let output: JSX.Element | null = null;\n\n        if (blockValue.content) {\n          output = (\n            <>\n              {blockValue.properties && (\n                <li>{renderChildText(blockValue.properties.title)}</li>\n              )}\n              {wrapList(children)}\n            </>\n          );\n        } else {\n          output = blockValue.properties ? (\n            <li>{renderChildText(blockValue.properties.title)}</li>\n          ) : null;\n        }\n\n        const isTopLevel =\n          block.value.type !== blockMap[block.value.parent_id].value.type;\n        const start = getListNumber(blockValue.id, blockMap);\n\n        return isTopLevel ? wrapList(output, start) : output;\n\n      case \"image\":\n      case \"embed\":\n      case \"figma\":\n      case \"video\":\n        const value = block.value as ContentValueType;\n\n        return (\n          <figure\n            className=\"notion-asset-wrapper\"\n            style={\n              value.format !== undefined\n                ? { width: value.format.block_width }\n                : undefined\n            }\n          >\n            <Asset block={block} mapImageUrl={mapImageUrl} />\n\n            {value.properties.caption && (\n              <figcaption className=\"notion-image-caption\">\n                {renderChildText(value.properties.caption)}\n              </figcaption>\n            )}\n          </figure>\n        );\n      case \"code\": {\n        if (blockValue.properties.title) {\n          const content = blockValue.properties.title[0][0];\n          const language = blockValue.properties.language[0][0];\n          return (\n            <Code\n              key={blockValue.id}\n              language={language || \"\"}\n              code={content}\n            />\n          );\n        }\n        break;\n      }\n      case \"column_list\":\n        return <div className=\"notion-row\">{children}</div>;\n      case \"column\":\n        const spacerWith = 46;\n        const ratio = blockValue.format.column_ratio;\n        const columns = Number((1 / ratio).toFixed(0));\n        const spacerTotalWith = (columns - 1) * spacerWith;\n        const width = `calc((100% - ${spacerTotalWith}px) * ${ratio})`;\n        return (\n          <>\n            <div className=\"notion-column\" style={{ width }}>\n              {children}\n            </div>\n            <div className=\"notion-spacer\" style={{ width: spacerWith }} />\n          </>\n        );\n      case \"quote\":\n        if (!blockValue.properties) return null;\n        return (\n          <blockquote className=\"notion-quote\">\n            {renderChildText(blockValue.properties.title)}\n          </blockquote>\n        );\n      case \"collection_view\":\n        if (!block) return null;\n\n        const collectionView = block?.collection?.types[0];\n\n        return (\n          <div>\n            <h3 className=\"notion-h3\">\n              {renderChildText(block.collection?.title!)}\n            </h3>\n\n            {collectionView?.type === \"table\" && (\n              <div style={{ maxWidth: \"100%\", marginTop: 5 }}>\n                <table className=\"notion-table\">\n                  <thead>\n                    <tr className=\"notion-tr\">\n                      {collectionView.format?.table_properties\n                        ?.filter(p => p.visible)\n                        .map((gp, index) => (\n                          <th\n                            className=\"notion-th\"\n                            key={index}\n                            style={{ minWidth: gp.width }}\n                          >\n                            {block.collection?.schema[gp.property]?.name}\n                          </th>\n                        ))}\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {block?.collection?.data.map((row, index) => (\n                      <tr className=\"notion-tr\" key={index}>\n                        {collectionView.format?.table_properties\n                          ?.filter(p => p.visible)\n                          .map((gp, index) => (\n                            <td\n                              key={index}\n                              className={\n                                \"notion-td \" +\n                                (gp.property === \"title\" ? \"notion-bold\" : \"\")\n                              }\n                            >\n                              {\n                                renderChildText(\n                                  row[\n                                    block.collection?.schema[gp.property]?.name!\n                                  ]\n                                )!\n                              }\n                            </td>\n                          ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n\n            {collectionView?.type === \"gallery\" && (\n              <div className=\"notion-gallery\">\n                {block.collection?.data.map((row, i) => (\n                  <div key={`col-${i}`} className=\"notion-gallery-card\">\n                    <div className=\"notion-gallery-content\">\n                      {collectionView.format?.gallery_properties\n                        ?.filter(p => p.visible)\n                        .map((gp, idx) => (\n                          <p\n                            key={idx + \"item\"}\n                            className={\n                              \"notion-gallery-data \" +\n                              (idx === 0 ? \"is-first\" : \"\")\n                            }\n                          >\n                            {getTextContent(\n                              row[block.collection?.schema[gp.property].name!]\n                            )}\n                          </p>\n                        ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      case \"callout\":\n        return (\n          <div\n            className={classNames(\n              \"notion-callout\",\n              blockValue.format.block_color &&\n                `notion-${blockValue.format.block_color}_co`\n            )}\n          >\n            <div>\n              <PageIcon block={block} mapImageUrl={mapImageUrl} />\n            </div>\n            <div className=\"notion-callout-text\">\n              {renderChildText(blockValue.properties.title)}\n            </div>\n          </div>\n        );\n      case \"bookmark\":\n        const link = blockValue.properties.link;\n        const title = blockValue.properties.title ?? link;\n        const description = blockValue.properties.description;\n        const block_color = blockValue.format?.block_color;\n        const bookmark_icon = blockValue.format?.bookmark_icon;\n        const bookmark_cover = blockValue.format?.bookmark_cover;\n\n        return (\n          <div className=\"notion-row\">\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classNames(\n                \"notion-bookmark\",\n                block_color && `notion-${block_color}`\n              )}\n              href={link[0][0]}\n            >\n              <div>\n                <div className=\"notion-bookmark-title\">\n                  {renderChildText(title)}\n                </div>\n                {description && (\n                  <div className=\"notion-bookmark-description\">\n                    {renderChildText(description)}\n                  </div>\n                )}\n\n                <div className=\"notion-bookmark-link\">\n                  {bookmark_icon && (\n                    <img src={bookmark_icon} alt={getTextContent(title)} />\n                  )}\n                  <div>{renderChildText(link)}</div>\n                </div>\n              </div>\n              {bookmark_cover && (\n                <div className=\"notion-bookmark-image\">\n                  <img src={bookmark_cover} alt={getTextContent(title)} />\n                </div>\n              )}\n            </a>\n          </div>\n        );\n      case \"toggle\":\n        return (\n          <details className=\"notion-toggle\">\n            <summary>{renderChildText(blockValue.properties.title)}</summary>\n            <div>{children}</div>\n          </details>\n        );\n      default:\n        if (process.env.NODE_ENV !== \"production\") {\n          console.log(\"Unsupported type \" + block?.value?.type);\n        }\n        return <div />;\n    }\n    return null;\n  };\n\n  // render a custom component first if passed.\n  if (\n    customBlockComponents &&\n    customBlockComponents[blockValue?.type] &&\n    // Do not use custom component for base page block\n    level !== 0\n  ) {\n    const CustomComponent = customBlockComponents[blockValue?.type]!;\n    return (\n      <CustomComponent\n        renderComponent={renderComponent}\n        blockValue={blockValue as BlockValueProp<typeof blockValue.type>}\n        level={level}\n      >\n        {children}\n      </CustomComponent>\n    );\n  }\n\n  return renderComponent();\n};\n","import React from \"react\";\nimport {\n  BlockMapType,\n  MapPageUrl,\n  MapImageUrl,\n  CustomBlockComponents,\n  CustomDecoratorComponents\n} from \"./types\";\nimport { Block } from \"./block\";\nimport { defaultMapImageUrl, defaultMapPageUrl } from \"./utils\";\n\nexport interface NotionRendererProps {\n  blockMap: BlockMapType;\n  fullPage?: boolean;\n  hideHeader?: boolean;\n  mapPageUrl?: MapPageUrl;\n  mapImageUrl?: MapImageUrl;\n\n  currentId?: string;\n  level?: number;\n  customBlockComponents?: CustomBlockComponents;\n  customDecoratorComponents?: CustomDecoratorComponents;\n}\n\nexport const NotionRenderer: React.FC<NotionRendererProps> = ({\n  level = 0,\n  currentId,\n  mapPageUrl = defaultMapPageUrl,\n  mapImageUrl = defaultMapImageUrl,\n  ...props\n}) => {\n  const { blockMap } = props;\n  const id = currentId || Object.keys(blockMap)[0];\n  const currentBlock = blockMap[id];\n\n  if (!currentBlock) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\"error rendering block\", currentId);\n    }\n    return null;\n  }\n\n  return (\n    <Block\n      key={id}\n      level={level}\n      block={currentBlock}\n      mapPageUrl={mapPageUrl}\n      mapImageUrl={mapImageUrl}\n      {...props}\n    >\n      {currentBlock?.value?.content?.map(contentId => (\n        <NotionRenderer\n          key={contentId}\n          currentId={contentId}\n          level={level + 1}\n          mapPageUrl={mapPageUrl}\n          mapImageUrl={mapImageUrl}\n          {...props}\n        />\n      ))}\n    </Block>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}